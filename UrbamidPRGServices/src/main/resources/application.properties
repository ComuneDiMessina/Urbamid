#CONFIGURAZIONI APPLICATIVO

#configurazioni spring boot
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.open-in-view=false
debug=false
management.endpoints.web.exposure.include=*
#Configurazione servlet context param
server.context_parameters.logbackDisableServletContainerInitializer=true
#CONFIGURAZIONE CONTESTO WEB spring boot
server.servlet.context-path=/urbamid
server.port=8086

#CONFIGURAZIONE MAIL
spring.mail.host=${spring.mail.filters.host}
spring.mail.port=${spring.mail.filters.port}
spring.mail.username=${spring.mail.filters.username}
spring.mail.password=${spring.mail.filters.password}
spring.mail.properties.mail.protocol=${spring.mail.filters.properties.mail.protocol}
spring.mail.properties.mail.smtp.auth=${spring.mail.filters.properties.mail.smtp.auth}
spring.mail.properties.mail.smtp.starttls.enable=${spring.mail.filters.properties.mail.smtp.starttls.enable}
spring.mail.properties.mail.debug=${spring.mail.filters.properties.mail.debug}

#configurazione datasource
prg.db.url=${prg.filters.db.url}
prg.db.username=${prg.filters.db.username}
prg.db.password=${prg.filters.db.password}
prg.db.driver=${prg.filters.db.driver}
prg.db.schema=${prg.filters.db.schema}
prg.db.max.pool.dimension=${prg.filters.db.max.pool.dimension}
prg.db.min.idle=${prg.filters.db.min.idle}
prg.db.maxIdleTime=60000
prg.db.validationQuery=SELECT 1
#configurazione hibernate
prg.db.hibernate.dialect=it.eng.tz.urbamid.prg.hibernate.pg.dialect.PRGPg95Dialect
prg.db.hibernate.show.sql=${prg.filters.db.hibernate.show.sql}
prg.db.hibernate.generate.statistics=${prg.filters.db.hibernate.generate.statistics}
prg.db.hibernate.format.sql=${prg.filters.db.hibernate.format.sql}
prg.db.hibernate.use.second.cache=true
prg.db.hibernate.use.query.cache=true
prg.db.hibernate.batch.size=25

#CONFIGURAZIONE CACHE DB
prg.db.cache.cache.size=100000
#tempo vita cache in millisecondi
prg.db.cache.cache.ttl=600000

#CONFIGURAZIONE CORS
prg.web.cors.enbaled=${prg.filters.web.cors.enbaled}

#CONFIGURAZIONE HTTP
prg.http.client.timeout=60000
prg.certificate=keystores.json
#CONFIGURAZIONE PROXY
prg.http.client.proxyEnable=${prg.filters.http.client.proxyEnable}
prg.http.client.portProxy=${prg.filters.http.client.portProxy}
prg.http.client.hostProxy=${prg.filters.http.client.hostProxy}
prg.http.client.usernameProxy=${prg.filters.http.client.usernameProxy}
prg.http.client.passwordProxy=${prg.filters.http.client.passwordProxy}
prg.http.client.urlNotProxy=${prg.filters.http.client.urlNotProxy}

#CONFIGURAZIONE OAUTH CON WSO2 IS
prg.oauth.idp.base.url=${prg.filters.oauth.idp.base.url}
prg.oauth.resource.id=${prg.filters.oauth.resource.id}
prg.oauth.jks.claim.issuer.url=${prg.oauth.idp.base.url}/token
prg.oauth.jwt.key.url=${prg.oauth.idp.base.url}/jwks

## MULTIPART (MultipartProperties)
# Abilita multipart upload
spring.servlet.multipart.enabled=true
# Soglia oltre il quale i file vengono scritti su disco
spring.servlet.multipart.file-size-threshold=2KB
# Massima dimensione per i file.
spring.servlet.multipart.max-file-size=200MB
# Massima dimensione per la multipart request
spring.servlet.multipart.max-request-size=215MB
## File Storage Properties
prg.export.base.path=${prg.export.base.path}
prg.export.template.path=/template
prg.export.filename=certificato_urbanistico_
prg.import.base.path=${prg.import.base.path}

## PARAMETRO DI PUNTAMENTO A GEOSERVER 
urbamid.rest.geoserver.endpoint.url=${urbamid.rest.geoserver.endpoint.url}

## PARAMETRO PER LAYER AREE STABILI/NON STABILI
prg.export.cdu.areestabili=STABILI|AREE STABILI